package org.exploit.signalix.test;

import org.exploit.signalix.manager.EventScope;
import org.exploit.signalix.utils.EventConsumer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

class EventTest {
    private EventScope eventScope;
    private EventListener listener;

    @BeforeEach
    public void prepare() {
        eventScope = new EventScope();
        listener = Mockito.spy(new EventListener());
    }

    @Test
    void testReflection() {
        eventScope.registerListener(listener);
        eventScope.call(new SampleEvent());

        verify(listener, times(1))
                .onEvent(Mockito.any(SampleEvent.class));
        verify(listener, times(0))
                .onAnotherEvent(Mockito.any(NoopEvent.class));
    }

    @Test
    void testConsumer() {
        EventConsumer<SampleEvent> mockedConsumer = Mockito.mock();

        eventScope.registerEvent(SampleEvent.class, mockedConsumer);
        eventScope.call(new SampleEvent());

        var captor = ArgumentCaptor.forClass(SampleEvent.class);
        verify(mockedConsumer, times(1))
                .accept(captor.capture());
    }
}
