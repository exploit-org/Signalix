package org.exploit.signalix.core;

import com.fasterxml.jackson.core.JsonProcessingException;
import org.exploit.signalix.annotation.KafkaEventListener;
import org.exploit.signalix.event.DeserializationFailureEvent;
import org.exploit.signalix.utils.UtilityMethods;
import org.exploit.signalix.marker.Event;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.errors.WakeupException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.Closeable;
import java.time.Duration;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;

public class KafkaEventConsumer extends Thread implements Closeable {
    private static final Logger LOGGER = LoggerFactory.getLogger(KafkaEventConsumer.class);

    private final AtomicBoolean stop = new AtomicBoolean(false);

    private final String id;
    private final KafkaEventManager eventManager;
    private final KafkaEventListener annotation;

    private final KafkaConsumer<String, String> consumer;

    private final ExecutorService executor;

    public KafkaEventConsumer(String id, KafkaEventManager eventManager, KafkaEventListener annotation) {
        this.id = id;
        this.eventManager = eventManager;

        this.annotation = annotation;

        var consumerProperties = UtilityMethods.convertToMap(eventManager.getProperties());

        consumerProperties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, false);
        consumerProperties.putIfAbsent(ConsumerConfig.GROUP_ID_CONFIG, annotation.groupId());
        consumerProperties.putIfAbsent(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, annotation.autoOffsetReset());
        consumerProperties.putAll(UtilityMethods.convertToMap(annotation.properties()));

        this.consumer = new KafkaConsumer<>(consumerProperties);
        this.executor = Executors.newFixedThreadPool(annotation.concurrency());
    }

    @Override
    public void run() {
        consumer.subscribe(Set.of(annotation.topics()));

        while (!stop.get()) {
            try {
                var consumerRecords = consumer.poll(Duration.ofMillis(annotation.pollMillis()));
                var countDown = new CountDownLatch(consumerRecords.count());

                for (var consumerRecord : consumerRecords) {
                    executor.execute(() -> {
                        var serializedEvent = consumerRecord.value();

                        try {
                            var event = eventManager.getEventObjectMapper().readValue(serializedEvent, Event.class);
                            eventManager.getEventScope().innerCall(event);
                        } catch (JsonProcessingException e) {
                            LOGGER.error("Error occurred while deserializing event: ", e);
                            eventManager.getEventScope().innerCall(new DeserializationFailureEvent(serializedEvent, e));
                        } finally {
                            countDown.countDown();
                        }
                    });
                }

                countDown.await();
                consumer.commitSync();
            } catch (WakeupException e) {
                LOGGER.info("Received WAKEUP for poll kafka task");
            } catch (Exception e) {
                LOGGER.error("Unknown error occurred while fetching from Kafka: ", e);
            }
        }
    }

    public String getConsumerId() {
        return id;
    }

    @Override
    public void close() {
        stop.set(true);

        consumer.wakeup();
        consumer.close();
        executor.shutdown();

        try {
            if (!executor.awaitTermination(annotation.terminateTimeout(), TimeUnit.MILLISECONDS))
                executor.shutdownNow();
        } catch (InterruptedException e) {
            executor.shutdownNow();
            Thread.currentThread().interrupt();
        }
    }
}
