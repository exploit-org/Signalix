package org.exploit.signalix.core;

import org.exploit.signalix.KafkaEventScope;
import org.exploit.signalix.annotation.KafkaEventListener;
import org.exploit.signalix.model.KafkaEventMeta;
import org.exploit.signalix.utils.EventObjectMapper;
import org.exploit.signalix.marker.Event;

import java.io.Closeable;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

public class KafkaEventManager implements Closeable {
    private final EventObjectMapper eventObjectMapper = new EventObjectMapper().init();

    private final Set<KafkaEventConsumer> eventConsumers = ConcurrentHashMap.newKeySet();

    private final Properties properties;
    private final KafkaEventScope eventScope;

    private final KafkaEventProducer eventProducer;

    public KafkaEventManager(Properties properties, KafkaEventScope eventScope) {
        this.properties = properties;
        this.eventScope = eventScope;

        this.eventProducer = new KafkaEventProducer(this);
    }

    public <T extends Event> void call(T event, KafkaEventMeta meta) {
        eventProducer.sendEvent(event, meta);
    }

    public void registerKafkaListener(Class<?> clazz, KafkaEventListener meta) {
        var eventConsumer = new KafkaEventConsumer(clazz.getName(), this, meta);
        eventConsumers.add(eventConsumer);

        eventConsumer.start();
    }

    public void closeConsumer(String id) {
        var deleteConsumers = eventConsumers.stream()
                .filter(e -> e.getConsumerId().equals(id))
                .toList();

        deleteConsumers.forEach(consumer -> {
            consumer.close();
            eventConsumers.remove(consumer);
        });
    }

    @Override
    public void close() {
        eventConsumers.forEach(KafkaEventConsumer::close);
        eventConsumers.clear();

        eventProducer.close();
    }

    public EventObjectMapper getEventObjectMapper() {
        return eventObjectMapper;
    }

    public KafkaEventScope getEventScope() {
        return eventScope;
    }

    public Properties getProperties() {
        return properties;
    }
}