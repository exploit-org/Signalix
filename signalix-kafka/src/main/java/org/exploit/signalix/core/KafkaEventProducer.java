package org.exploit.signalix.core;

import org.exploit.signalix.exception.EventExecutionException;
import org.exploit.signalix.model.KafkaEventMeta;
import org.exploit.signalix.utils.UtilityMethods;
import org.exploit.signalix.marker.Event;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;

public class KafkaEventProducer extends KafkaProducer<String, String> {
    private final KafkaEventManager eventManager;

    public KafkaEventProducer(KafkaEventManager eventManager) {
        super(eventManager.getProperties());
        this.eventManager = eventManager;
    }

    public <T extends Event> void sendEvent(T event, KafkaEventMeta meta) {
        try {
            var topic = meta.topic();
            var name = event.getClass().getName();
            var value = eventManager.getEventObjectMapper().writeValueAsString(event);

            var partition = meta.partition() != -1 ? meta.partition() : null;
            var headers = UtilityMethods.extractHeaders(meta);

            send(new ProducerRecord<>(topic, partition, name, value, headers));
        } catch (Exception e) {
            throw new EventExecutionException(e.getMessage());
        }
    }
}
