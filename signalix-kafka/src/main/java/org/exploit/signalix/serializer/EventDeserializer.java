package org.exploit.signalix.serializer;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TextNode;
import org.exploit.signalix.constant.Constant;
import org.exploit.signalix.marker.Event;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class EventDeserializer extends StdDeserializer<Event> {
    private final Map<String, Class<? extends Event>> registeredEvents = new HashMap<>();

    public EventDeserializer() {
        super(Event.class);
    }

    public void addEvent(Class<? extends Event> clazz) {
        registeredEvents.put(clazz.getSimpleName(), clazz);
    }

    public void removeEvent(Class<? extends Event> clazz) {
        registeredEvents.remove(clazz.getSimpleName());
    }

    @Override
    public Event deserialize(JsonParser p, DeserializationContext ctx) throws IOException {
        var codec = p.getCodec();
        var node = (JsonNode) codec.readTree(p);

        var simpleName = node.get(Constant.PROPERTY_NAME);

        if (!(simpleName instanceof TextNode textNode))
            throw new JsonMappingException(p, "Bad event provided");

        var eventClass = registeredEvents.get(textNode.asText());

        if (eventClass == null)
            throw new JsonMappingException(p, "Unknown event type: " + simpleName);

        var cloned = (ObjectNode) node.deepCopy();
        cloned.remove(Constant.PROPERTY_NAME);

        return codec.treeToValue(cloned, eventClass);
    }
}
