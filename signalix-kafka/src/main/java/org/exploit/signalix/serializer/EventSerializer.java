package org.exploit.signalix.serializer;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import org.exploit.signalix.constant.Constant;
import org.exploit.signalix.marker.Event;

import java.io.IOException;

public class EventSerializer extends StdSerializer<Event> {
    private final ObjectMapper defaultObjectMapper;

    public EventSerializer(ObjectMapper objectMapper) {
        super(Event.class);
        this.defaultObjectMapper = objectMapper;
    }

    @Override
    public void serialize(Event value, JsonGenerator gen, SerializerProvider provider) throws IOException {
        gen.writeStartObject();
        gen.writeStringField(Constant.PROPERTY_NAME, value.getClass().getSimpleName());

        var javaType = defaultObjectMapper.constructType(value.getClass());
        var beanDesc = provider.getConfig().introspect(javaType);

        var serializer = BeanSerializerFactory.instance.findBeanOrAddOnSerializer(provider,
                javaType, beanDesc, provider.isEnabled(MapperFeature.USE_STATIC_TYPING)
        );

        if (serializer instanceof BeanSerializerBase) {
            for (var it = serializer.properties(); it.hasNext(); ) {
                var writer = it.next();

                if (!Constant.PROPERTY_NAME.equals(writer.getName())) {
                    try {
                        writer.serializeAsField(value, gen, provider);
                    } catch (Exception e) {
                        throw new IllegalStateException(e);
                    }
                }
            }
        } else {
            throw new IllegalStateException("Couldn't serialize");
        }

        gen.writeEndObject();
    }
}
