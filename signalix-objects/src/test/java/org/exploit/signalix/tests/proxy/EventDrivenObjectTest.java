package org.exploit.signalix.tests.proxy;

import org.exploit.signalix.manager.EventScope;
import org.exploit.signalix.objects.SignalixObjectFactory;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.fail;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.argThat;
import static org.mockito.Mockito.timeout;
import static org.mockito.Mockito.verify;

@ExtendWith(MockitoExtension.class)
public class EventDrivenObjectTest {
    private EventScope eventScope;
    private UserSession sessionProxy;
    private TestListener testListenerSpy;

    @BeforeEach
    public void setUp() {
        eventScope = new EventScope();

        TestListener realListener = new TestListener();
        testListenerSpy = Mockito.spy(realListener);
        eventScope.registerListener(testListenerSpy);

        SignalixObjectFactory objectFactory = new SignalixObjectFactory(eventScope);
        UserSession session = new UserSession();
        session.setSessionId("12345");
        sessionProxy = objectFactory.newEventDrivenObject(session);
    }

    @AfterEach
    public void tearDown() {
        if (eventScope != null) {
            eventScope.close();
        }
    }

    @Test
    public void testSessionCreationEvent() {
        sessionProxy.startSession();

        verify(testListenerSpy, timeout(300)).onSessionCreated(any(SessionCreatedEvent.class));
        verify(testListenerSpy).onSessionCreated(argThat(event ->
                "12345".equals(event.getSessionId())
        ));
    }

    @Test
    public void testActionPerformedEvent() {
        sessionProxy.performAction("login");

        verify(testListenerSpy, timeout(300)).onActionPerformed(any(ActionPerformedEvent.class));

        verify(testListenerSpy, timeout(300)).onActionPerformed(argThat(event ->
                "12345".equals(event.getSessionId()) && "login".equals(event.getAction())
        ));
    }

    @Test
    public void testSessionErrorEvent() {
        try {
            sessionProxy.exceptional();
            fail("Error should have been called");
        } catch (Exception ignored) {

        }

        verify(testListenerSpy, timeout(300)).onSessionError(any(SessionErrorEvent.class));

        verify(testListenerSpy, timeout(300)).onSessionError(argThat(event ->
                "12345".equals(event.getSessionId()) && event.getException() != null
        ));
    }

    @Test
    public void testSessionTimeoutEvent() throws InterruptedException {
        Thread.sleep(3000L);

        verify(testListenerSpy, timeout(300)).onSessionTimeout(any(SessionTimeoutEvent.class));
        verify(testListenerSpy, timeout(300)).onSessionTimeout(argThat(event ->
                "12345".equals(event.getSessionId())
        ));
    }

}