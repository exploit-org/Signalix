package org.exploit.signalix.objects;

import net.bytebuddy.ByteBuddy;
import net.bytebuddy.description.modifier.Visibility;
import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
import net.bytebuddy.implementation.MethodDelegation;
import net.bytebuddy.matcher.ElementMatchers;
import org.exploit.signalix.manager.EventScope;
import org.exploit.signalix.objects.proxy.ProxyInterceptor;
import org.exploit.signalix.objects.trigger.EventTrigger;
import org.exploit.signalix.objects.util.AnnotationTriggerParser;
import org.exploit.signalix.objects.util.TimedObjectHandler;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class EventDrivenProxyFactory {
    private final EventScope eventScope;

    public EventDrivenProxyFactory(EventScope eventScope) {
        this.eventScope = eventScope;
    }

    public <T> T createProxy(T target) {
        var targetClass = target.getClass();
        var parsed = AnnotationTriggerParser.parseTriggers(targetClass);

        try {
            var loadedClass = new ByteBuddy()
                    .subclass(targetClass)
                    .defineField("___target", Object.class, Visibility.PUBLIC)
                    .defineField("___methodTriggers", Map.class, Visibility.PUBLIC)
                    .defineField("___eventScope", EventScope.class, Visibility.PUBLIC)
                    .defineField("___proxy", Object.class, Visibility.PUBLIC)
                    .method(ElementMatchers.not(ElementMatchers.isDeclaredBy(Object.class)))
                    .intercept(MethodDelegation.to(ProxyInterceptor.class))
                    .make()
                    .load(targetClass.getClassLoader(), ClassLoadingStrategy.Default.INJECTION)
                    .getLoaded();

            @SuppressWarnings("unchecked")
            var proxyClass = (Class<? extends T>) loadedClass;

            var proxy = proxyClass.getDeclaredConstructor().newInstance();

            Map<Method, List<EventTrigger>> methodTriggers = new HashMap<>(parsed.getMethodTriggers());

            proxy.getClass().getField("___target").set(proxy, target);
            proxy.getClass().getField("___methodTriggers").set(proxy, methodTriggers);
            proxy.getClass().getField("___eventScope").set(proxy, eventScope);
            proxy.getClass().getField("___proxy").set(proxy, proxy);

            TimedObjectHandler.handleTimed(target, eventScope);

            return proxy;
        } catch (Exception e) {
            throw new IllegalStateException("Failed to create proxy", e);
        }
    }
}