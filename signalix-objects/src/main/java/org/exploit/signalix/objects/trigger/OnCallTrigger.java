package org.exploit.signalix.objects.trigger;

import org.exploit.signalix.annotations.MethodParam;
import org.exploit.signalix.manager.EventScope;
import org.exploit.signalix.marker.Event;

import java.lang.reflect.Method;

import static org.exploit.signalix.objects.util.FieldUtil.copyFields;

public class OnCallTrigger implements EventTrigger {
    private final Class<? extends Event> eventClass;
    private final Method method;

    public OnCallTrigger(Class<? extends Event> eventClass, Method method) {
        this.eventClass = eventClass;
        this.method = method;
    }

    @Override
    public void process(Object target, String methodName, Object[] args, Object returnValue, EventScope eventScope) {
        try {
            var e = eventClass.getDeclaredConstructor().newInstance();
            copyFields(target, e);
            copyFieldsFromArguments(args, e);
            eventScope.call(e);
        } catch (Exception ignored) {}
    }

    private void copyFieldsFromArguments(Object[] args, Object event) {
        if (args == null || args.length == 0)
            return;

        var params = method.getParameters();
        var eFields = event.getClass().getDeclaredFields();

        for (var i = 0; i < params.length; i++) {
            var p = params[i];
            var mp = p.getAnnotation(MethodParam.class);
            if (mp == null) continue;
            var fieldName = mp.value();
            var argValue = args[i];

            for (var ef : eFields) {
                ef.setAccessible(true);
                if (ef.getName().equals(fieldName)) {
                    try {
                        ef.set(event, argValue);
                    } catch (Exception ignored) {}
                    break;
                }
            }
        }
    }
}