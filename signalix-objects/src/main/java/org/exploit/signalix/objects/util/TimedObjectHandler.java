package org.exploit.signalix.objects.util;

import org.exploit.signalix.annotations.LiveTime;
import org.exploit.signalix.annotations.Temporary;
import org.exploit.signalix.event.time.impl.WrappedTimedEvent;
import org.exploit.signalix.manager.EventScope;

import static org.exploit.signalix.objects.util.FieldUtil.copyFields;

public class TimedObjectHandler {
    private TimedObjectHandler() {}

    public static void handleTimed(Object target, EventScope eventScope) {
        var clazz = target.getClass();
        var timed = clazz.getAnnotation(Temporary.class);
        if (timed == null) return;

        var delay = timed.liveTime();

        var methodDelay = getDelayFromMethod(target);
        if (methodDelay != null) {
            delay = methodDelay;
        } else {
            var fieldDelay = getDelayFromField(target);
            if (fieldDelay != null) {
                delay = fieldDelay;
            }
        }

        try {
            var te = timed.eventClass().getDeclaredConstructor().newInstance();
            copyFields(target, te);
            eventScope.scheduleEvent(new WrappedTimedEvent(te, System.nanoTime() + delay * 1_000_000));
        } catch (Exception ignored) {}
    }

    private static Long getDelayFromMethod(Object target) {
        var clazz = target.getClass();
        for (var m : clazz.getMethods()) {
            if (m.isAnnotationPresent(LiveTime.class)) {
                if (m.getParameterCount() == 0
                        && (m.getReturnType() == long.class || m.getReturnType() == Long.class)) {
                    try {
                        var val = m.invoke(target);
                        if (val instanceof Number) {
                            return ((Number)val).longValue();
                        }
                    } catch (Exception ignored) {}
                }
            }
        }
        return null;
    }

    private static Long getDelayFromField(Object target) {
        var clazz = target.getClass();
        for (var f : clazz.getDeclaredFields()) {
            if (f.isAnnotationPresent(LiveTime.class)) {
                f.setAccessible(true);
                try {
                    var val = f.get(target);
                    if (val instanceof Number) {
                        return ((Number) val).longValue();
                    }
                } catch (Exception ignored) {}
            }
        }
        return null;
    }

}